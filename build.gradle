plugins {
	id 'org.springframework.boot' version '2.2.1.RELEASE'
	id 'io.spring.dependency-management' version '1.0.8.RELEASE'
	id 'net.researchgate.release' version '2.6.0'
	id 'java'
}

group = 'com.suom'
// version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

configurations {
	developmentOnly
	runtimeClasspath {
		extendsFrom developmentOnly
	}
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.liquibase:liquibase-core'
	implementation 'org.mariadb.jdbc:mariadb-java-client'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
}

test {
	useJUnitPlatform()
}

release {
	git {
		// We release off various branches to deploy to testing environments (possible a bad practice, but we can revise later).  To allow this, we need to
		// reset the "requireBranch" otherwise we could only release off master
		requireBranch = ''
		pushToCurrentBranch = true
	}
}

afterReleaseBuild.dependsOn uploadArchives

task copyScripts(type: Copy) {

	from "start_service.sh"
	into "build/libs/"

	from "stop_service.sh"
	into "build/libs/"

	print 'copy new sh scripts'
}

build.dependsOn(copyScripts)
